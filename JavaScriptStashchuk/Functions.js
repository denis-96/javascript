// FUNCTIONS

// Объявление функции
function func(param) {
  // тело функции
  // some code
  return param; // результат функции
}

// Функция может быть: именованной, присвоена переменной, 
// анонимной, аргуменом при вызове другой функции, значением свойства объекта.

// Функция - это объект

// Вызов функции
func()

// Колбэк функции

function anotherFunction() {
  // Действия
}
function fnWithCallback(callbackFn) {
  callbackFn()
}
fnWithCallback(anotherFunction)

// Правила работы с функциями 
//  Не рекомендуется изменять внешние относительно функции переменный


// Функциональные выражения

// Функциональные выражения не имеют имени
// Функциональные выражения всегда анонимноые и их нельзя использовать автономно

// Присваивание функционального выражения переменной
const myFunction = function(a, b) {
  let c
  a += 1
  c = a + b
  return c
}
myFunction(5, 3)  // 9

// Функциональное выражение в вызове другой функции
setTimeout(function() {
  console.log('Отложенное сообщение')
}, 1000)


// Cтрелочные функции

// У них тоже нет имени, они анонимные
// Стрелочная функция - это выражение
// (a, b) => {let c = a + b; return c;}

const arrowFunction = (a, b) => {
  let c
  a += 1
  c = a + b
  return c
}
arrowFunction(5, 3)  // 9

// Стрелочная функция в вызове другой функции
setTimeout(() => {
  console.log('Отложенное сообщение')
}, 1000)

// Сокращения в стрелочных функциях

// 1. Если один параметр, то круглые скобки можно опустить
// a => {тело функции}

// 2. Фигурные скобки можно опустить если тело функции состоит из одного выражения
// (a, b) => a + b
// В этом случае стрелочная функция неявно возвращает результат выражения


// Значения параметров по умолчанию
function multByFactor(value, multiplier = 1) {
  return value * multiplier
}
multByFactor(10, 2)
multByFactor(5)

const newPost = (post, addedAt = Date()) => ({
  ...post,
  addedAt
})
const firstPost = {
  id: 1,
  author: 'Bogdan'
}
console.log(newPost(firstPost))